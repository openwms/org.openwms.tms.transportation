spring:
  application:
    name: tms-service
  security:
    user:
      name: user
      password: sa
  jackson:
    date-format: "yyyy-MM-dd'T'HH:mm:ssXXX" # Only matches Dates no Instants!
    deserialization:
      read-date-timestamps-as-nanoseconds: false
  jpa:
    mapping-resources:
      - META-INF/tms-orm.xml
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
    show-sql: false
  main:
    allow-bean-definition-overriding: true
  mvc:
    format:
      date-time: "yyyy-MM-dd'T'HH:mm:ssXXX" # Must match the pattern how of @JsonFormat field annotation patterns
      date: yyyy-MM-dd
      time: HH:mm:ss
  output:
    ansi:
      enabled: always

owms:
  eureka:
    url: http://${owms.eureka.user.name}:${owms.eureka.user.password}@localhost:8761
    user:
      name: user
      password: sa
    zone: ${owms.eureka.url}/eureka/
  srv:
    hostname: localhost
    protocol: http
  tms:
    block-tu-deletion-states:
  tracing:
    url: http://localhost:4317

server:
  port: ${PORT:8131}

eureka:
  client:
    instance-info-replication-interval-seconds: 10 # default is 30
    registryFetchIntervalSeconds: 5 # SBA
    service-url:
      defaultZone: ${owms.eureka.zone} # Must be camelCase
  instance:
    hostname: ${owms.srv.hostname}
    # Request a lease with a validity of 5 seconds. If until then the
    # lease has not been renewed, it expires and the Eureka server can evict it.
    # Default: 90s
    lease-expiration-duration-in-seconds: 5

    # The cadence of lease renewal, i.e. how often a heartbeat is sent to Eureka server.
    # In this case every 2 seconds. Use this only for development / debugging. In production use the ...
    # Default: 30s
    lease-renewal-interval-in-seconds:    2
    metadata-map:
      group: TMS
      config-protocol: http # The protocol used to access the config server
      username: ${spring.security.user.name}
      password: ${spring.security.user.password}
      protocol: ${owms.srv.protocol}
      startup: ${random.int} # SBA
      zone: ${owms.eureka.zone}
      prometheus.scrape: "true"
      prometheus.path: "/actuator/prometheus"
      prometheus.port: ${server.port}
    non-secure-port-enabled: true
    prefer-ip-address: true
    secure-port-enabled: false

info:
  scm-url: "@scm.url@"
  build-url: "@ciManagement.url@"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    rabbit:
      enabled: false
  info:
    git:
      mode: simple
  metrics:
    distribution:
      percentiles-histogram:
        greeting: true
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}
  otlp:
    tracing:
      endpoint: ${owms.tracing.url}
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      probability: 1.0

---
spring:
  config:
    activate:
      on-profile: ASYNCHRONOUS
  rabbitmq:
    listener:
      simple:
        retry:
          max-attempts: 3
          enabled: true
          initial-interval: 1s
          max-interval: 1s

management:
  health:
    rabbit:
      enabled: true

owms:
  commands:
    common:
      tu:
        exchange-name: common.tu.commands
        routing-key: common.tu.command.out.removing
        queue-name: tms-tu-commands-queue
    tms:
      to:
        exchange-name: tms.commands
        routing-key: to.*
        queue-name: tms-to-commands
  events:
    tms:
      to:
        exchange-name: tms.events
  requests:
    tms:
      to:
        exchange-name: tms.requests
        routing-key: response.state.change
        queue-name: tms-to-requests
  transportation:
    dead-letter:
      exchange-name: dle.transportation
      queue-name: tms-dl-queue
    serialization: json

---
spring:
  config:
    activate:
      on-profile: TEST
  cloud:
    bootstrap:
      enabled: false
    config:
      discovery:
        enabled: false
      enabled: false
      fail-fast: false # true means retry
      retry:
        max-attempts: 120
    discovery:
      enabled: false
  jpa:
    show-sql: false
  main:
    banner-mode: "off"

---
spring:
  config:
    activate:
      on-profile: TESTPG
  cloud:
    bootstrap:
      enabled: false
    config:
      discovery:
        enabled: false
      enabled: false
      fail-fast: false # true means retry
      retry:
        max-attempts: 120
    discovery:
      enabled: false
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql:testdb
    username: KARL
    password: KARL
  jpa:
    database: postgresql
    generate-ddl: true
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
        default_schema: public
    hibernate:
      ddl-auto: update
